#!/usr/bin/env python
import sys, os
from intelhex import IntelHex

BYTESPERLINE = 16

if len(sys.argv) < 3:
	print "Usage: ihex2carr.py file.hex file.h [arrayname]"
	print "Converts PIC intel hex file to a c array + config word"
	print "Uses file.hex as array name if arrayname is not specified"
	print "Config word is the array name _config"
	sys.exit()

infilename = sys.argv[1]
outfilename = sys.argv[2]
if 3 in sys.argv:
	arrayname = sys.argv[3]
else:
	arrayname = os.path.basename(infilename).replace('.', '_')

# Read in ihex file and remove config word at 0xFFF
ih_config = IntelHex(infilename)
ihdict_config = ih_config.todict()

# Remove upper nibble of addresses
data_config = dict()
for addr in ihdict_config:
	data_config[(addr & 0xFFF)] = ihdict_config[addr]

configword = ((data_config[0xFFF] if 0xFFF in data_config else 0) << 8 ) | (data_config[0xFFE] if 0xFFE in data_config else 0)
del data_config[0xFFE]
del data_config[0xFFF]

# Create a new ihex object without the config word getting in the way
ih = IntelHex(data_config)
data = ih.todict()

of = open(outfilename, 'w')

of.write("/* Autogenerated by ihex2carr.py */\n");
of.write("const uint16_t " + arrayname + "_config = %#06x;\n" % configword)
of.write("const uint16_t " + arrayname + "[] = {\n")

try:
	i = 1
	for addr in range(0, ih.maxaddr(), 2):
		#print "%x" % addr
		word = ((data[addr+1] if addr+1 in data else 0) << 8) | (data[addr] if addr in data else 0)
		#print "%x: %x" % (addr, word)
		of.write("%#06x" % word)
		of.write(", ")
		if i % BYTESPERLINE == 0:
			of.write("\n")
		i+=1
except:
	print "An error occured:", sys.exc_type, ":", sys.exc_value

of.write("};\n");
of.close()
